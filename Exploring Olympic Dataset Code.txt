/*

This is the SQL script for analyzing the Exploring Olympic Dataset project.

The steps are listed down bellow:
1 Analyze summer_games table

*/


-- Summer_games table analysis:
-- Calculate the top 3 sports with the most athletes

SELECT 
	sport, COUNT(DISTINCT athlete_id) AS athletes
FROM [Exploreing Olympic Dataset].[dbo].[summer_games]
GROUP BY sport
ORDER BY athletes DESC;

-- Query sport, events, and athletes from summer_games

SELECT 
	sport, 
    COUNT(DISTINCT event) AS events, 
    COUNT(DISTINCT athlete_id) AS athletes
FROM [Exploreing Olympic Dataset].[dbo].[summer_games]
GROUP BY sport;


-- Select the age of the oldest athlete for each region

SELECT 
	region, MAX(age) AS age_of_oldest_athlete
FROM [Exploreing Olympic Dataset].[dbo].[athletes] AS a
-- First JOIN statement
JOIN [Exploreing Olympic Dataset].[dbo].[summer_games] AS s
ON a.id = s.athlete_id
-- Second JOIN statement
JOIN [Exploreing Olympic Dataset].[dbo].[countries] AS c
ON s.country_id = c.id
GROUP BY region;


-- Create a report that shows unique events by sport for both summer and winter events.
-- Select sport and events for summer sports and winter sports 
SELECT 
	sport, COUNT(DISTINCT event) AS events
FROM [Exploreing Olympic Dataset].[dbo].[summer_games] AS s
GROUP BY sport
UNION
-- Select sport and events for winter sports
SELECT 
	sport, COUNT(DISTINCT event) AS events
FROM [Exploreing Olympic Dataset].[dbo].[winter_games] AS w
GROUP BY sport
-- Show the most events at the top of the report
ORDER BY events DESC;


-- Explore bronze from the summer_games table
SELECT 
	bronze, 
	COUNT(*) AS rows
FROM [Exploreing Olympic Dataset].[dbo].[summer_games]
GROUP BY bronze;


-- Create a query that shows Bronze Medals by Country and then validate it using the subquery technique.
-- Pull total_bronze_medals from summer_games below 
SELECT SUM(bronze) AS total_bronze_medals
FROM [Exploreing Olympic Dataset].[dbo].[summer_games]

-- Select the total bronze_medals from your query
SELECT SUM(bronze_medals)
FROM 
  (SELECT 
      country, 
      SUM(bronze) AS bronze_medals
  FROM [Exploreing Olympic Dataset].[dbo].[summer_games] AS s
  JOIN [Exploreing Olympic Dataset].[dbo].[countries] AS c
  ON s.country_id = c.id
  GROUP BY country) AS subquery;

-- Include athletes with at least 3 gold medals, ordered by gold medals won with the most medals at the top
SELECT 
	a.name AS athlete_name, 
    SUM(gold) AS gold_medals
FROM [Exploreing Olympic Dataset].[dbo].[summer_games] AS s
JOIN [Exploreing Olympic Dataset].[dbo].[athletes] AS a
ON s.athlete_id = a.id
GROUP BY a.name
HAVING SUM(gold) > 2
ORDER BY gold_medals DESC;



--  Create a report with the following fields: season which outputs either summer or winter, country, events which shows the unique number of events by country
SELECT 
	'summer' AS season, 
    country, 
    COUNT(DISTINCT event) AS events
FROM [Exploreing Olympic Dataset].[dbo].[summer_games] AS s
JOIN [Exploreing Olympic Dataset].[dbo].[countries] AS c
ON s.country_id = c.id
GROUP BY country
-- Combine the queries
UNION
-- Query season, country, and events for all winter events
SELECT 
    'winter' AS season, country, 
    COUNT(DISTINCT event) AS events
FROM [Exploreing Olympic Dataset].[dbo].[winter_games] AS w
JOIN [Exploreing Olympic Dataset].[dbo].[countries] AS c
ON w.country_id = c.id
GROUP BY country
-- Sort the results to show most events at the top
ORDER BY events DESC;




-- Create the same report as before, which contains with the following fields: seasons with summer or winter, country and unique events
-- Add outer layer to pull season, country and unique events
SELECT 
	season, 
    country, 
    COUNT(DISTINCT event) AS events
FROM
    (SELECT 
     	'summer' AS season, 
     	country_id, 
     	event
    FROM [Exploreing Olympic Dataset].[dbo].[summer_games]
	UNION ALL
    SELECT 
     	'winter' AS season, 
     	country_id, 
     	event
    FROM [Exploreing Olympic Dataset].[dbo].[winter_games]) as subquery
Join [Exploreing Olympic Dataset].[dbo].[countries] as c
ON subquery.country_id = c.id
GROUP BY season, country
ORDER BY events DESC;


--  Create the segment field that buckets an athlete into one of three segments: Tall Female, which represents a female that is at least 175 centimeters tall. Tall Male, which represents a male that is at least 190 centimeters tall
SELECT 
	name,
    -- Output 'Tall Female', 'Tall Male', or 'Other'
	CASE WHEN height >= 175 and gender = 'F' THEN 'Tall Female'
         WHEN height >= 190 and gender = 'M' THEN 'Tall Male'
         ELSE 'other' END AS segment
FROM [Exploreing Olympic Dataset].[dbo].[athletes]


-- Understand how BMI differs by each summer sport
-- Create new BMI column in atheletes table
ALTER TABLE [Exploreing Olympic Dataset].[dbo].[athletes]
ADD [BMI] FLOAT NULL;
UPDATE [Exploreing Olympic Dataset].[dbo].[athletes]
SET BMI = weight * 10000 / SQUARE(height) 


ALTER TABLE [Exploreing Olympic Dataset].[dbo].[athletes]
DROP COLUMN BMI_bucket


-- Create new BMI_bucket catagory column in atheletes table
ALTER TABLE [Exploreing Olympic Dataset].[dbo].[athletes]
ADD [BMI_bucket] VARCHAR(MAX) NULL
UPDATE [Exploreing Olympic Dataset].[dbo].[athletes]
SET BMI_bucket = CASE WHEN BMI < 25 THEN '<25'
                      WHEN BMI < 30 THEN '<30'
					  WHEN BMI > 30 THEN '>30'
					  ELSE 'no weight recorded' END
SELECT * FROM [Exploreing Olympic Dataset].[dbo].[athletes]


-- Join the new updated atheletes table with summer_games table and get the numbers of athletes in different sports and different BMI_bucket
SELECT 
    sport, BMI_bucket, COUNT(DISTINCT athlete_id) AS athletes
FROM [Exploreing Olympic Dataset].[dbo].[summer_games] AS s
JOIN [Exploreing Olympic Dataset].[dbo].[athletes] AS a
ON s.athlete_id = a.id
GROUP BY sport, BMI_bucket
ORDER BY sport, athletes DESC;


-- Calculate total bronze, silver and gold medals for athletes age under 16
Select
    SUM(Bronze) AS bronze_medals, 
	SUM(Silver) AS silver_medals,
	SUM(Gold) AS gold_medals
FROM [Exploreing Olympic Dataset].[dbo].[summer_games] As s
JOIN [Exploreing Olympic Dataset].[dbo].[athletes] as a
ON s.athlete_id = a.id
WHERE age <= 16;


-- Pull event, unique athletes, countries that won nobel price from summer_games table and winter_games table
SELECT 
    event,
	-- Add the gender field down below
	CASE WHEN event like '%Women%' THEN 'female'
	ELSE 'male' END AS gender, 
	COUNT(DISTINCT athlete_id) AS athletes
FROM [Exploreing Olympic Dataset].[dbo].[summer_games]
-- Only include countries that won a nobel prize
WHERE country_id IN
    (SELECT country_id
	 FROM [Exploreing Olympic Dataset].[dbo].[country_stats]
	 WHERE nobel_prize_winners > 0)
GROUP BY event
-- Union the data from winter table
UNION
SELECT
    event, 
    -- Add the gender field down below
	CASE WHEN event like '%Women%' THEN 'female'
	ELSE 'male' END AS gender, 
	COUNT(DISTINCT athlete_id) AS athletes
FROM [Exploreing Olympic Dataset].[dbo].[winter_games]
-- Only include countries that won a nobel prize
WHERE country_id IN
    (SELECT country_id
	 FROM [Exploreing Olympic Dataset].[dbo].[country_stats]
	 WHERE nobel_prize_winners > 0)
GROUP BY event
ORDER BY athletes DESC;




-- Analyze country_stats table
-- Change the data type of  population column in table country_stats from int to float and calculate the average
SELECT AVG(CAST(population AS float)) AS avg_population
FROM [Exploreing Olympic Dataset].[dbo].[country_stats];


-- Figure out how many athletes attended winter and summer games in each country
SELECT
    s.country_id, 
	COUNT(DISTINCT s.athlete_id) AS summer_athletes, 
    COUNT(DISTINCT w.athlete_id) AS winter_athletes
FROM [Exploreing Olympic Dataset].[dbo].[summer_games] as s
JOIN [Exploreing Olympic Dataset].[dbo].[winter_games] as w
ON s.country_id = CAST(w.country_id AS int)
GROUP BY s.country_id;



-- extract year from date in table country_stats, and calculate the sum of gdp
SELECT 
	year,
    DATEPART(year, CAST(year AS date)) AS decade,
    SUM(gdp) AS world_gdp
FROM [Exploreing Olympic Dataset].[dbo].[country_stats]
GROUP BY year
ORDER BY year DESC;




-- Analyze table countries
-- Convert column country from table countries to all capitalized case
SELECT 
	country, 
    UPPER(country) AS country_altered
FROM [Exploreing Olympic Dataset].[dbo].[countries]
GROUP BY country;


-- Select the country name after '-'
SELECT 
	country, 
    SUBSTRING(country, 7, 100) AS country_altered
FROM [Exploreing Olympic Dataset].[dbo].[countries]
GROUP BY country;


-- Regulate the format of column region
SELECT 
	region,
	-- Replace all '&' characters with the string 'and' from region LATIN AMER. & CARIB   
	REPLACE(region, '&', 'and') as character_swap,
	-- Replace all '.' with' '
	REPLACE(region,'.','') AS character_remove
FROM [Exploreing Olympic Dataset].[dbo].[countries]
WHERE region = 'LATIN AMER. & CARIB'
GROUP BY region;


-- Show max gdp and compare it with every column
SELECT 
	country_id,
    year,
    gdp,
    MAX(gdp) OVER () AS global_max_gdp
FROM [Exploreing Olympic Dataset].[dbo].[country_stats];


-- Select the athletes earns the most gold metals from each region, that attend the summer game. Also select their region and total gold metals
SELECT
     region,
	 athlete_name,
	 total_golds
FROM
    (SELECT 
	    region,
        name AS athlete_name, 
        SUM(gold) AS total_golds,
        -- Assign a regional rank to each athlete
        ROW_NUMBER() OVER (PARTITION BY region ORDER BY SUM(gold) DESC) AS row_num
     FROM [Exploreing Olympic Dataset].[dbo].[summer_games] AS s
     JOIN [Exploreing Olympic Dataset].[dbo].[athletes] AS a
     ON a.id = s.athlete_id
     JOIN [Exploreing Olympic Dataset].[dbo].[countries] AS c
     ON s.country_id = c.id
     GROUP BY region, name) AS subquery 
WHERE row_num = 1;



-- Calculate the sum of each countrie's gdp, the sum of global gdp, the percentage of each countrie's gdp to the global gpd and he percentage of each countrie's gdp to region gpd
SELECT 
    region,
    country,
    SUM(gdp) AS country_gdp,
	SUM(SUM(gdp)) OVER () AS global_gdp,
	SUM(gdp) / SUM(SUM(gdp)) OVER () AS perc_global_gdp,
	SUM(gdp) / SUM(SUM(gdp)) OVER (PARTITION BY region) AS perc_region_gdp
FROM [Exploreing Olympic Dataset].[dbo].[country_stats] AS cs
JOIN [Exploreing Olympic Dataset].[dbo].[countries] AS c
ON cs.country_id = c.id
WHERE gdp IS NOT NULL
GROUP BY region, country
ORDER BY country_gdp DESC


-- Calcute the atheletes' average height by each region and how much percentage of their gdp to the world's
SELECT
    -- Pull in region and calculate avg tallest height
	region,
    AVG(height) AS avg_height,
	-- Calculate region's percent of world gdp
	SUM(gdp)/SUM(SUM(gdp)) OVER () AS perc_world_gdp
FROM [Exploreing Olympic Dataset].[dbo].[countries] AS c
JOIN
    (SELECT
	     country_id, 
         height,
		 -- Number the height of each country's athletes
	 ROW_NUMBER() OVER (PARTITION BY country_id ORDER BY height DESC) AS row_num 
	 FROM [Exploreing Olympic Dataset].[dbo].[winter_games] AS W
	 JOIN [Exploreing Olympic Dataset].[dbo].[athletes] AS a 
	 ON w.athlete_id = a.id 
	 GROUP BY country_id, height
	 ORDER BY country_id, height DESC offset 0 rows
	 ) AS subquery
ON c.id = subquery.country_id
JOIN [Exploreing Olympic Dataset].[dbo].[country_stats] AS CS
ON cs.country_id = c.id

GROUP BY region
